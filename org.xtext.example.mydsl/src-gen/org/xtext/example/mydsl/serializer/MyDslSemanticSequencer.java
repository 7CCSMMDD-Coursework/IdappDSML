/*
 * generated by Xtext 2.24.0
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.mydsl.myDsl.Company;
import org.xtext.example.mydsl.myDsl.Contract;
import org.xtext.example.mydsl.myDsl.Customer;
import org.xtext.example.mydsl.myDsl.InsurableObject;
import org.xtext.example.mydsl.myDsl.InsurableObjects;
import org.xtext.example.mydsl.myDsl.MyDslPackage;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MyDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MyDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MyDslPackage.COMPANY:
				sequence_Company(context, (Company) semanticObject); 
				return; 
			case MyDslPackage.CONTRACT:
				sequence_Contract(context, (Contract) semanticObject); 
				return; 
			case MyDslPackage.CUSTOMER:
				sequence_Customer(context, (Customer) semanticObject); 
				return; 
			case MyDslPackage.INSURABLE_OBJECT:
				sequence_InsurableObject(context, (InsurableObject) semanticObject); 
				return; 
			case MyDslPackage.INSURABLE_OBJECTS:
				sequence_InsurableObjects(context, (InsurableObjects) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Company returns Company
	 *
	 * Constraint:
	 *     name=EString
	 */
	protected void sequence_Company(ISerializationContext context, Company semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.COMPANY__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.COMPANY__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCompanyAccess().getNameEStringParserRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Contract returns Contract
	 *
	 * Constraint:
	 *     (
	 *         customer=Customer 
	 *         company=Company 
	 *         insurableObjects=InsurableObjects 
	 *         premium=REAL 
	 *         increase=REAL 
	 *         claim=REAL 
	 *         period=INT
	 *     )
	 */
	protected void sequence_Contract(ISerializationContext context, Contract semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.CONTRACT__CUSTOMER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.CONTRACT__CUSTOMER));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.CONTRACT__COMPANY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.CONTRACT__COMPANY));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.CONTRACT__INSURABLE_OBJECTS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.CONTRACT__INSURABLE_OBJECTS));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.CONTRACT__PREMIUM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.CONTRACT__PREMIUM));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.CONTRACT__INCREASE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.CONTRACT__INCREASE));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.CONTRACT__CLAIM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.CONTRACT__CLAIM));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.CONTRACT__PERIOD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.CONTRACT__PERIOD));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getContractAccess().getCustomerCustomerParserRuleCall_4_0(), semanticObject.getCustomer());
		feeder.accept(grammarAccess.getContractAccess().getCompanyCompanyParserRuleCall_5_0(), semanticObject.getCompany());
		feeder.accept(grammarAccess.getContractAccess().getInsurableObjectsInsurableObjectsParserRuleCall_7_0(), semanticObject.getInsurableObjects());
		feeder.accept(grammarAccess.getContractAccess().getPremiumREALParserRuleCall_12_0(), semanticObject.getPremium());
		feeder.accept(grammarAccess.getContractAccess().getIncreaseREALParserRuleCall_15_0(), semanticObject.getIncrease());
		feeder.accept(grammarAccess.getContractAccess().getClaimREALParserRuleCall_18_0(), semanticObject.getClaim());
		feeder.accept(grammarAccess.getContractAccess().getPeriodINTTerminalRuleCall_21_0(), semanticObject.getPeriod());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Customer returns Customer
	 *
	 * Constraint:
	 *     name=EString
	 */
	protected void sequence_Customer(ISerializationContext context, Customer semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.CUSTOMER__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.CUSTOMER__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCustomerAccess().getNameEStringParserRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     InsurableObject returns InsurableObject
	 *
	 * Constraint:
	 *     name=EString
	 */
	protected void sequence_InsurableObject(ISerializationContext context, InsurableObject semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.INSURABLE_OBJECT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.INSURABLE_OBJECT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getInsurableObjectAccess().getNameEStringParserRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     InsurableObjects returns InsurableObjects
	 *
	 * Constraint:
	 *     (objects+=InsurableObject objects+=InsurableObject*)
	 */
	protected void sequence_InsurableObjects(ISerializationContext context, InsurableObjects semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
