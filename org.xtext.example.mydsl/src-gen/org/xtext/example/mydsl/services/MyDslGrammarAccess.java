/*
 * generated by Xtext 2.24.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ContractElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Contract");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContractKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cParticipatingPartiesKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cCustomerAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCustomerCustomerParserRuleCall_4_0 = (RuleCall)cCustomerAssignment_4.eContents().get(0);
		private final Assignment cCompanyAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cCompanyCompanyParserRuleCall_5_0 = (RuleCall)cCompanyAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cInsurableObjectsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cInsurableObjectsInsurableObjectsParserRuleCall_7_0 = (RuleCall)cInsurableObjectsAssignment_7.eContents().get(0);
		private final Keyword cTermsKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cLeftCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cPremiumKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cEqualsSignKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cPremiumAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cPremiumREALParserRuleCall_12_0 = (RuleCall)cPremiumAssignment_12.eContents().get(0);
		private final Keyword cPremiumIncreaseKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Keyword cEqualsSignKeyword_14 = (Keyword)cGroup.eContents().get(14);
		private final Assignment cIncreaseAssignment_15 = (Assignment)cGroup.eContents().get(15);
		private final RuleCall cIncreaseREALParserRuleCall_15_0 = (RuleCall)cIncreaseAssignment_15.eContents().get(0);
		private final Keyword cClaimKeyword_16 = (Keyword)cGroup.eContents().get(16);
		private final Keyword cEqualsSignKeyword_17 = (Keyword)cGroup.eContents().get(17);
		private final Assignment cClaimAssignment_18 = (Assignment)cGroup.eContents().get(18);
		private final RuleCall cClaimREALParserRuleCall_18_0 = (RuleCall)cClaimAssignment_18.eContents().get(0);
		private final Keyword cPaymentPeriodKeyword_19 = (Keyword)cGroup.eContents().get(19);
		private final Keyword cEqualsSignKeyword_20 = (Keyword)cGroup.eContents().get(20);
		private final Assignment cPeriodAssignment_21 = (Assignment)cGroup.eContents().get(21);
		private final RuleCall cPeriodINTTerminalRuleCall_21_0 = (RuleCall)cPeriodAssignment_21.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_22 = (Keyword)cGroup.eContents().get(22);
		private final Keyword cRightCurlyBracketKeyword_23 = (Keyword)cGroup.eContents().get(23);
		
		//Contract:
		//	'Contract' '{'
		//	'ParticipatingParties' '{'
		//	customer=Customer
		//	company=Company
		//	'}'
		//	insurableObjects=InsurableObjects
		//	'Terms' '{'
		//	'Premium' '=' premium=REAL
		//	'PremiumIncrease' '=' increase=REAL
		//	'Claim' '=' claim=REAL
		//	'PaymentPeriod' '=' period=INT // number of days
		//	'}'
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Contract' '{'
		//'ParticipatingParties' '{'
		//customer=Customer
		//company=Company
		//'}'
		//insurableObjects=InsurableObjects
		//'Terms' '{'
		//'Premium' '=' premium=REAL
		//'PremiumIncrease' '=' increase=REAL
		//'Claim' '=' claim=REAL
		//'PaymentPeriod' '=' period=INT // number of days
		//'}'
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Contract'
		public Keyword getContractKeyword_0() { return cContractKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'ParticipatingParties'
		public Keyword getParticipatingPartiesKeyword_2() { return cParticipatingPartiesKeyword_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//customer=Customer
		public Assignment getCustomerAssignment_4() { return cCustomerAssignment_4; }
		
		//Customer
		public RuleCall getCustomerCustomerParserRuleCall_4_0() { return cCustomerCustomerParserRuleCall_4_0; }
		
		//company=Company
		public Assignment getCompanyAssignment_5() { return cCompanyAssignment_5; }
		
		//Company
		public RuleCall getCompanyCompanyParserRuleCall_5_0() { return cCompanyCompanyParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
		
		//insurableObjects=InsurableObjects
		public Assignment getInsurableObjectsAssignment_7() { return cInsurableObjectsAssignment_7; }
		
		//InsurableObjects
		public RuleCall getInsurableObjectsInsurableObjectsParserRuleCall_7_0() { return cInsurableObjectsInsurableObjectsParserRuleCall_7_0; }
		
		//'Terms'
		public Keyword getTermsKeyword_8() { return cTermsKeyword_8; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_9() { return cLeftCurlyBracketKeyword_9; }
		
		//'Premium'
		public Keyword getPremiumKeyword_10() { return cPremiumKeyword_10; }
		
		//'='
		public Keyword getEqualsSignKeyword_11() { return cEqualsSignKeyword_11; }
		
		//premium=REAL
		public Assignment getPremiumAssignment_12() { return cPremiumAssignment_12; }
		
		//REAL
		public RuleCall getPremiumREALParserRuleCall_12_0() { return cPremiumREALParserRuleCall_12_0; }
		
		//'PremiumIncrease'
		public Keyword getPremiumIncreaseKeyword_13() { return cPremiumIncreaseKeyword_13; }
		
		//'='
		public Keyword getEqualsSignKeyword_14() { return cEqualsSignKeyword_14; }
		
		//increase=REAL
		public Assignment getIncreaseAssignment_15() { return cIncreaseAssignment_15; }
		
		//REAL
		public RuleCall getIncreaseREALParserRuleCall_15_0() { return cIncreaseREALParserRuleCall_15_0; }
		
		//'Claim'
		public Keyword getClaimKeyword_16() { return cClaimKeyword_16; }
		
		//'='
		public Keyword getEqualsSignKeyword_17() { return cEqualsSignKeyword_17; }
		
		//claim=REAL
		public Assignment getClaimAssignment_18() { return cClaimAssignment_18; }
		
		//REAL
		public RuleCall getClaimREALParserRuleCall_18_0() { return cClaimREALParserRuleCall_18_0; }
		
		//'PaymentPeriod'
		public Keyword getPaymentPeriodKeyword_19() { return cPaymentPeriodKeyword_19; }
		
		//'='
		public Keyword getEqualsSignKeyword_20() { return cEqualsSignKeyword_20; }
		
		//period=INT
		public Assignment getPeriodAssignment_21() { return cPeriodAssignment_21; }
		
		//INT
		public RuleCall getPeriodINTTerminalRuleCall_21_0() { return cPeriodINTTerminalRuleCall_21_0; }
		
		//// number of days
		//'}'
		public Keyword getRightCurlyBracketKeyword_22() { return cRightCurlyBracketKeyword_22; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_23() { return cRightCurlyBracketKeyword_23; }
	}
	public class CustomerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Customer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCustomerAddressKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//// Validation IDEA: Claim is always larger than Premium
		//// Validation IDEA: increase real number has to be between 0 and 1
		//Customer:
		//	'CustomerAddress' '=' name=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//'CustomerAddress' '=' name=EString
		public Group getGroup() { return cGroup; }
		
		//'CustomerAddress'
		public Keyword getCustomerAddressKeyword_0() { return cCustomerAddressKeyword_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
	}
	public class CompanyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Company");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCompanyAddressKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//Company:
		//	'CompanyAddress' '=' name=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//'CompanyAddress' '=' name=EString
		public Group getGroup() { return cGroup; }
		
		//'CompanyAddress'
		public Keyword getCompanyAddressKeyword_0() { return cCompanyAddressKeyword_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
	}
	public class InsurableObjectsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.InsurableObjects");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInsurableObjectsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cObjectsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cObjectsInsurableObjectParserRuleCall_2_0 = (RuleCall)cObjectsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cObjectsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cObjectsInsurableObjectParserRuleCall_3_1_0 = (RuleCall)cObjectsAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//InsurableObjects:
		//	'InsurableObjects' '{'
		//	objects+=InsurableObject ("," objects+=InsurableObject)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'InsurableObjects' '{'
		//objects+=InsurableObject ("," objects+=InsurableObject)*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'InsurableObjects'
		public Keyword getInsurableObjectsKeyword_0() { return cInsurableObjectsKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//objects+=InsurableObject
		public Assignment getObjectsAssignment_2() { return cObjectsAssignment_2; }
		
		//InsurableObject
		public RuleCall getObjectsInsurableObjectParserRuleCall_2_0() { return cObjectsInsurableObjectParserRuleCall_2_0; }
		
		//("," objects+=InsurableObject)*
		public Group getGroup_3() { return cGroup_3; }
		
		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//objects+=InsurableObject
		public Assignment getObjectsAssignment_3_1() { return cObjectsAssignment_3_1; }
		
		//InsurableObject
		public RuleCall getObjectsInsurableObjectParserRuleCall_3_1_0() { return cObjectsInsurableObjectParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class InsurableObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.InsurableObject");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cObjectNameKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//InsurableObject:
		//	'ObjectName' '=' name=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//'ObjectName' '=' name=EString
		public Group getGroup() { return cGroup; }
		
		//'ObjectName'
		public Keyword getObjectNameKeyword_0() { return cObjectNameKeyword_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
	}
	public class REALElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.REAL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//REAL ecore::EFloat hidden():
		//	INT? "." INT;
		@Override public ParserRule getRule() { return rule; }
		
		//INT? "." INT
		public Group getGroup() { return cGroup; }
		
		//INT?
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	
	
	private final ContractElements pContract;
	private final CustomerElements pCustomer;
	private final CompanyElements pCompany;
	private final InsurableObjectsElements pInsurableObjects;
	private final InsurableObjectElements pInsurableObject;
	private final REALElements pREAL;
	private final EStringElements pEString;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pContract = new ContractElements();
		this.pCustomer = new CustomerElements();
		this.pCompany = new CompanyElements();
		this.pInsurableObjects = new InsurableObjectsElements();
		this.pInsurableObject = new InsurableObjectElements();
		this.pREAL = new REALElements();
		this.pEString = new EStringElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Contract:
	//	'Contract' '{'
	//	'ParticipatingParties' '{'
	//	customer=Customer
	//	company=Company
	//	'}'
	//	insurableObjects=InsurableObjects
	//	'Terms' '{'
	//	'Premium' '=' premium=REAL
	//	'PremiumIncrease' '=' increase=REAL
	//	'Claim' '=' claim=REAL
	//	'PaymentPeriod' '=' period=INT // number of days
	//	'}'
	//	'}';
	public ContractElements getContractAccess() {
		return pContract;
	}
	
	public ParserRule getContractRule() {
		return getContractAccess().getRule();
	}
	
	//// Validation IDEA: Claim is always larger than Premium
	//// Validation IDEA: increase real number has to be between 0 and 1
	//Customer:
	//	'CustomerAddress' '=' name=EString;
	public CustomerElements getCustomerAccess() {
		return pCustomer;
	}
	
	public ParserRule getCustomerRule() {
		return getCustomerAccess().getRule();
	}
	
	//Company:
	//	'CompanyAddress' '=' name=EString;
	public CompanyElements getCompanyAccess() {
		return pCompany;
	}
	
	public ParserRule getCompanyRule() {
		return getCompanyAccess().getRule();
	}
	
	//InsurableObjects:
	//	'InsurableObjects' '{'
	//	objects+=InsurableObject ("," objects+=InsurableObject)*
	//	'}';
	public InsurableObjectsElements getInsurableObjectsAccess() {
		return pInsurableObjects;
	}
	
	public ParserRule getInsurableObjectsRule() {
		return getInsurableObjectsAccess().getRule();
	}
	
	//InsurableObject:
	//	'ObjectName' '=' name=EString;
	public InsurableObjectElements getInsurableObjectAccess() {
		return pInsurableObject;
	}
	
	public ParserRule getInsurableObjectRule() {
		return getInsurableObjectAccess().getRule();
	}
	
	//REAL ecore::EFloat hidden():
	//	INT? "." INT;
	public REALElements getREALAccess() {
		return pREAL;
	}
	
	public ParserRule getREALRule() {
		return getREALAccess().getRule();
	}
	
	//EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
