/*
 * generated by Xtext 2.20.0
 */
package uk.ac.kcl.inf.mmdd.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import uk.ac.kcl.inf.mmdd.idappdsml.modelling.Contract;
import uk.ac.kcl.inf.mmdd.idappdsml.modelling.Customer;
import uk.ac.kcl.inf.mmdd.idappdsml.modelling.InsurableObject;
import uk.ac.kcl.inf.mmdd.idappdsml.modelling.InsuranceCompany;
import uk.ac.kcl.inf.mmdd.idappdsml.modelling.ModellingPackage;
import uk.ac.kcl.inf.mmdd.idappdsml.modelling.Terms;
import uk.ac.kcl.inf.mmdd.services.IdappdsmlGrammarAccess;

@SuppressWarnings("all")
public class IdappdsmlSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private IdappdsmlGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == ModellingPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case ModellingPackage.CONTRACT:
				sequence_Contract(context, (Contract) semanticObject); 
				return; 
			case ModellingPackage.CUSTOMER:
				sequence_Customer(context, (Customer) semanticObject); 
				return; 
			case ModellingPackage.INSURABLE_OBJECT:
				sequence_InsurableObject(context, (InsurableObject) semanticObject); 
				return; 
			case ModellingPackage.INSURANCE_COMPANY:
				sequence_InsuranceCompany(context, (InsuranceCompany) semanticObject); 
				return; 
			case ModellingPackage.TERMS:
				sequence_Terms(context, (Terms) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Contract returns Contract
	 *
	 * Constraint:
	 *     (
	 *         insurableobject=[InsurableObject|EString]? 
	 *         insurancecompany=[InsuranceCompany|EString]? 
	 *         customer=[Customer|EString]? 
	 *         (terms+=Terms terms+=Terms*)?
	 *     )
	 */
	protected void sequence_Contract(ISerializationContext context, Contract semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Customer returns Customer
	 *
	 * Constraint:
	 *     address=EString?
	 */
	protected void sequence_Customer(ISerializationContext context, Customer semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InsurableObject returns InsurableObject
	 *
	 * Constraint:
	 *     {InsurableObject}
	 */
	protected void sequence_InsurableObject(ISerializationContext context, InsurableObject semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InsuranceCompany returns InsuranceCompany
	 *
	 * Constraint:
	 *     address=EString?
	 */
	protected void sequence_InsuranceCompany(ISerializationContext context, InsuranceCompany semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Terms returns Terms
	 *
	 * Constraint:
	 *     insurableobject=[InsurableObject|EString]?
	 */
	protected void sequence_Terms(ISerializationContext context, Terms semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
