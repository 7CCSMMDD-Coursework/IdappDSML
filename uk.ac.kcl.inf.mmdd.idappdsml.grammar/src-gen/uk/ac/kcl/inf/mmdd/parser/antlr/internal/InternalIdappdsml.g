/*
 * generated by Xtext 2.24.0
 */
grammar InternalIdappdsml;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package uk.ac.kcl.inf.mmdd.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package uk.ac.kcl.inf.mmdd.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import uk.ac.kcl.inf.mmdd.services.IdappdsmlGrammarAccess;

}

@parser::members {

 	private IdappdsmlGrammarAccess grammarAccess;

    public InternalIdappdsmlParser(TokenStream input, IdappdsmlGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Contract";
   	}

   	@Override
   	protected IdappdsmlGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleContract
entryRuleContract returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getContractRule()); }
	iv_ruleContract=ruleContract
	{ $current=$iv_ruleContract.current; }
	EOF;

// Rule Contract
ruleContract returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getContractAccess().getContractAction_0(),
					$current);
			}
		)
		otherlv_1='Contract'
		{
			newLeafNode(otherlv_1, grammarAccess.getContractAccess().getContractKeyword_1());
		}
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getContractAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			otherlv_3='insurableobject'
			{
				newLeafNode(otherlv_3, grammarAccess.getContractAccess().getInsurableobjectKeyword_3_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getContractRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getContractAccess().getInsurableobjectInsurableObjectCrossReference_3_1_0());
					}
					ruleEString
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_5='insurancecompany'
			{
				newLeafNode(otherlv_5, grammarAccess.getContractAccess().getInsurancecompanyKeyword_4_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getContractRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getContractAccess().getInsurancecompanyInsuranceCompanyCrossReference_4_1_0());
					}
					ruleEString
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_7='customer'
			{
				newLeafNode(otherlv_7, grammarAccess.getContractAccess().getCustomerKeyword_5_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getContractRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getContractAccess().getCustomerCustomerCrossReference_5_1_0());
					}
					ruleEString
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_9='terms'
			{
				newLeafNode(otherlv_9, grammarAccess.getContractAccess().getTermsKeyword_6_0());
			}
			otherlv_10='{'
			{
				newLeafNode(otherlv_10, grammarAccess.getContractAccess().getLeftCurlyBracketKeyword_6_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getContractAccess().getTermsTermsParserRuleCall_6_2_0());
					}
					lv_terms_11_0=ruleTerms
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getContractRule());
						}
						add(
							$current,
							"terms",
							lv_terms_11_0,
							"uk.ac.kcl.inf.mmdd.Idappdsml.Terms");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_12=','
				{
					newLeafNode(otherlv_12, grammarAccess.getContractAccess().getCommaKeyword_6_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getContractAccess().getTermsTermsParserRuleCall_6_3_1_0());
						}
						lv_terms_13_0=ruleTerms
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getContractRule());
							}
							add(
								$current,
								"terms",
								lv_terms_13_0,
								"uk.ac.kcl.inf.mmdd.Idappdsml.Terms");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_14='}'
			{
				newLeafNode(otherlv_14, grammarAccess.getContractAccess().getRightCurlyBracketKeyword_6_4());
			}
		)?
		otherlv_15='}'
		{
			newLeafNode(otherlv_15, grammarAccess.getContractAccess().getRightCurlyBracketKeyword_7());
		}
	)
;

// Entry rule entryRuleTerms
entryRuleTerms returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTermsRule()); }
	iv_ruleTerms=ruleTerms
	{ $current=$iv_ruleTerms.current; }
	EOF;

// Rule Terms
ruleTerms returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getTermsAccess().getTermsAction_0(),
					$current);
			}
		)
		otherlv_1='Terms'
		{
			newLeafNode(otherlv_1, grammarAccess.getTermsAccess().getTermsKeyword_1());
		}
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getTermsAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			otherlv_3='insurableobject'
			{
				newLeafNode(otherlv_3, grammarAccess.getTermsAccess().getInsurableobjectKeyword_3_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTermsRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getTermsAccess().getInsurableobjectInsurableObjectCrossReference_3_1_0());
					}
					ruleEString
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getTermsAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleEString
entryRuleEString returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEStringRule()); }
	iv_ruleEString=ruleEString
	{ $current=$iv_ruleEString.current.getText(); }
	EOF;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			$current.merge(this_STRING_0);
		}
		{
			newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0());
		}
		    |
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1());
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
